<?xml version="1.0"?>

<!-- ADJUST PROJECT NAME, FILENAME AND INCLUDED CLASSES FOR JENKINS IF YOU COPY THIS FILE TO A NEW PROJECT-->

<project name="Goobi Validation Plugin" basedir="." default="deploy">

	<!-- ================================= 
	        properties             
	     ================================= -->
	<property name="filename" value="IntrandaValidationPlugin" />
	<property name="dir.build" value="bin" />
	<property name="dir.deploy" value="deploy" />
	<property name="pluginFolderWin" value="C:/Goobi/plugins/validation/" />
	<property name="pluginFolderUnix" value="/opt/digiverso/goobi/plugins/validation/" />

	<path id="classpath">
		<fileset dir="../Goobi/WEB-INF/lib" />
		<fileset dir="/opt/digiverso/libs" />
	</path>

	<tstamp>
		<format property="tstamped-file-name" pattern="yyyy-MM-dd" locale="en,UK" />
	</tstamp>

	<!-- ================================= 
         General targets: clean, createDirs, git.revision
	     ================================= -->

	<!-- Clean up generated and compiled files. -->
	<target name="clean" description="Clean up generated and compiled files.">
		<echo>Cleaning up workspace...</echo>
		<!--<delete dir="${dir.build}" />-->
		<delete dir="${dir.deploy}" />
	</target>

	<!-- Create needed directories -->
	<target name="createDirs" description="Create needed directories.">
		<echo>Creating needed directories...</echo>
		<mkdir dir="${dir.build}" />
		<mkdir dir="${dir.deploy}" />
	</target>

	<!-- Store git revision in internal variable -->
	<target name="git.revision" description="Store git revision in ${repository.version}">
		<exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
			<arg value="describe" />
			<arg value="--tags" />
			<arg value="--always" />
			<arg value="HEAD" />
		</exec>
		<condition property="repository.version" value="${git.revision}" else="unknown">
			<and>
				<isset property="git.revision" />
				<length string="${git.revision}" trim="yes" length="0" when="greater" />
			</and>
		</condition>
		<echo> Git revision is: ${git.revision}</echo>
	</target>

	<!-- ================================= 
         copy all files to final places
	     ================================= -->

	<!--  copyToPluginFolder, depending on OS -->
	<target name="copyToPluginFolder" depends="linux,win32">
		<antcall target="clean" />
	</target>
	<target name="linux" if="isUnix">
		<echo>Using Linux path: ${pluginFolderUnix}</echo>
		<copy tofile="${pluginFolderUnix}/${filename}-${git.revision}.jar" file="${dir.deploy}/${filename}-${git.revision}.jar" overwrite="true" />
	</target>
	<target name="win32" if="isWindows">
		<echo>Using Windows path: ${pluginFolderWin}</echo>
		<copy tofile="${pluginFolderWin}$${filename}-${git.revision}.jar" file="${dir.deploy}/${filename}-${git.revision}.jar" overwrite="true" />
	</target>

	<!-- ================================= 
         Compile the sources
	     ================================= -->

	<target name="compile-jenkins" if="${jenkins}">
		<echo>Using jenkins compiler</echo>
		<javac destdir="${dir.build}" includeantruntime="false">
			<classpath refid="classpath" />
			<compilerarg value="-Xlint" />
			<src path="src" />
			<src path="../Goobi/WEB-INF/src" />
<!--		<src path="../Goobi/src" />
			<src path="../Goobi/src-dubious" />			-->
		</javac>
	</target>

	<target name="compile-eclipse" unless="jenkins">
		<echo>Using eclipse compiler</echo>
		<javac destdir="${dir.build}" includeantruntime="false">
			<classpath refid="classpath" />
			<compilerarg value="-Xlint" />
			<src path="src" />
		</javac>
	</target>

	<!-- ================================= 
         Include the libraries
	     ================================= -->

	<target name="libs-jenkins" if="jenkins">
		<pathconvert property="libs.project" pathsep=" ">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>

			<path>
				<fileset dir="../Goobi/WEB-INF/lib">
					<include name="**/*.jar" />
				</fileset>
			</path>
		</pathconvert>
	</target>

	<target name="libs-eclipse" unless="jenkins">
		<pathconvert property="libs.project" pathsep=" ">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="lib/*" />
				</chainedmapper>
			</mapper>
			<path>
				<fileset dir="bin/de/intranda/goobi/plugins">
					<include name="*.class" />
				</fileset>
			</path>
		</pathconvert>
	</target>

	<!-- ================================= 
         Compile the jar
	     ================================= -->

	<target name="jar-jenkins" if="jenkins">
		<jar destfile="${dir.deploy}/${filename}-${git.revision}.jar">
			<manifest>
				<attribute name="Main-Class" value="de.intranda.goobi.PluginInfo" />
				<attribute name="Class-Path" value="${libs.project}" />
			</manifest>
			<fileset dir="bin">
				<include name="de/intranda/goobi/plugins.txt" />
				<include name="de/intranda/goobi/PluginInfo.class" />
				<include name="de/intranda/goobi/plugins/" />
				<include name="com/googlecode/fascinator/redbox/" />
			</fileset>
		</jar>
	</target>

	<target name="jar-eclipse" unless="jenkins">
		<jar destfile="${dir.deploy}/${filename}-${git.revision}.jar">
			<manifest>
				<attribute name="Main-Class" value="de.intranda.goobi.PluginInfo" />
				<attribute name="Class-Path" value="${libs.project}" />
			</manifest>
			<fileset dir="bin" />
		</jar>
	</target>

	<!-- ================================= 
	              RUNNABLE JAR
		 ================================= -->

	<target name="jar.runnable" depends="git.revision">
		<echo>Compile sources ...</echo>
		<antcall target="compile-jenkins" />
		<antcall target="compile-eclipse" />

		<echo>Generate Plugin list</echo>
		<pathconvert property="plugins.project" pathsep=" ">
			<mapper>
				<chainedmapper>
					<flattenmapper />
					<globmapper from="*" to="*" />
				</chainedmapper>
			</mapper>
			<path>
				<!-- lib.home contains all jar files in several subdirectories -->
				<fileset dir="bin/de/intranda/goobi/plugins">
					<include name="*.class" />
				</fileset>
			</path>
		</pathconvert>

		<antcall target="libs-jenkins" />
		<antcall target="libs-eclipse" />
		<echo file="${dir.build}/de/intranda/goobi/plugins.txt">${plugins.project}  -----------------------------------------------------  Git-revision: ${git.revision}</echo>

		<echo>Generating jar file: ${dir.deploy}/${filename}-${git.revision}.jar</echo>
		<antcall target="jar-jenkins" />
		<antcall target="jar-eclipse" />
	</target>

	<!-- ================================= 
                  DISTRIBUTION
	     ================================= -->

	<!-- Run all targets in appropiate order for clean compile-->
	<target name="dist" depends="clean, createDirs, git.revision, jar.runnable" description="Creating everything for Jenkins." />

	<!-- ================================= 
                  DEPLOY
	     ================================= -->

	<!-- Default target that compiles the jar from eclipse and copies it to the right folder depending on operating system-->
	<target name="deploy" depends="jar.runnable" description="Default target for Eclipse compiling with correct deployment">
		<condition property="isWindows">
			<os family="windows" />
		</condition>
		<condition property="isUnix">
			<os family="unix" />
		</condition>
		<antcall target="copyToPluginFolder" />
		<echo>intranda... alles ist gut!</echo>
	</target>

</project>
